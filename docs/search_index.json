[["cambio-de-funciones.html", "Capítulo 6 Cambio de Funciones 6.1 Fase 1: Definir 6.2 Fase 2: Medir 6.3 Fase 3: Analizar", " Capítulo 6 Cambio de Funciones .scroll-100 { max-height: 100px; overflow-y: auto; background-color: inherit; } 6.1 Fase 1: Definir 6.1.1 1. Función Pareto Resultados antes: defectos &lt;-c(rep(&quot;E&quot;,62),rep(&quot;B&quot;,15),rep(&quot;F&quot;,3),rep(&quot;A&quot;,10),rep(&quot;C&quot;,20),rep(&quot;D&quot;,10)) qualityTools::paretoChart(defectos) ## ## Frequency 62 20 15 10 10 3 ## Cum. Frequency 62 82 97 107 117 120 ## Percentage 51.7% 16.7% 12.5% 8.3% 8.3% 2.5% ## Cum. Percentage 51.7% 68.3% 80.8% 89.2% 97.5% 100.0% ## ## Frequency 62.00000 20.00000 15.00000 10.000000 10.000000 3.0 ## Cum. Frequency 62.00000 82.00000 97.00000 107.000000 117.000000 120.0 ## Percentage 51.66667 16.66667 12.50000 8.333333 8.333333 2.5 ## Cum. Percentage 51.66667 68.33333 80.83333 89.166667 97.500000 100.0 Resultados ahora: ParetoChart_(defectos) Podemos utilizar parámetros para mostrar la tabla o la gráfica: # Mostrar solo la gráfica ParetoChart_(defectos, showTable = FALSE) # Mostrar solo la tabla ParetoChart_(defectos, showPlot = FALSE) ## E C B A D F ## Frequency 62.00 20.00 15.00 10.00 10.00 3.0 ## Cum.Frequency 62.00 82.00 97.00 107.00 117.00 120.0 ## Percentage 51.67 16.67 12.50 8.33 8.33 2.5 ## Cum.Percentage 51.67 68.33 80.83 89.17 97.50 100.0 Podemos cambiar los colores de los puntos y las barras: ParetoChart_(defectos, col=&#39;blue&#39;, border=&#39;green&#39;) 6.2 Fase 2: Medir 6.2.1 Capacidad de Calibre - MSA Tipo I Para poder implementar esta función cg, primero debemos modificar 3 funciones que se utilizan en esta función macro. Además utilizaremos los siguientes datos de pruebas: x &lt;- c(9.991, 10.013, 10.001, 10.007, 10.010, 10.013, 10.008, 10.017, 10.005, 10.005, 10.002, 10.017, 10.005, 10.002, 9.996, 10.011, 10.009, 10.006, 10.008, 10.003, 10.002, 10.006, 10.010, 9.992, 10.013) target = 10.003 tolerance = c(9.903, 10.103) ref.interval = pnorm(3) - pnorm(-3) facCg = 0.2 facCgk = 0.1 n = 0.2 type = &quot;b&quot; col = &quot;black&quot; pch = 19 #xlim = NULL #ylim = NULL conf.level = 0.95 cex.val = 1.5 sd = sd(x) mean = mean(x) ref.ar = qnorm(ref.interval, mean, sd) - qnorm(1 - ref.interval,mean, sd) quant1 = qnorm((1 - ref.interval)/2, mean, sd) quant2 = qnorm(ref.interval + (1 - ref.interval)/2, mean,sd) xlim = c(0, length(x)) ylim = c(min(x, target - n/2 * (abs(diff(tolerance))), quant1, quant2), max(x, target + n/2 * (abs(diff(tolerance))), quant1, quant2)) 6.2.1.1 CgRunChart Resultados antes: qualityTools::cgRunChart(x = x, target = target, tolerance = tolerance, ref.interval = ref.interval, facCg = facCg, facCgk = facCgk, n = n, type = type, col = col, pch = pch, xlim = xlim, ylim = ylim, main = &quot;Run Chart&quot;, conf.level = conf.level, cgOut = FALSE) Resultados Ahora: cg_RunChart(x = x, target = target, tolerance = tolerance, ref.interval = ref.interval, facCg = facCg, facCgk = facCgk, n = n, type = type, col = col, pch = pch, xlim = xlim, ylim = ylim, main = &quot;Run Chart&quot;, conf.level = conf.level, cgOut = FALSE) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. 6.2.1.2 cgHist Resultados Anteriores: qualityTools::cgHist(x = x, target = target, tolerance = tolerance, ref.interval = ref.interval, facCg = facCg, facCgk = facCgk, n = n, col = &quot;lightblue&quot;, xlim = xlim, ylim = ylim, main = paste(&quot;Histogram of&quot;, deparse(substitute(x)), &quot;- target&quot;), conf.level = conf.level, cgOut = FALSE) Resultados Ahora: cg_HistChart(x = x, target = target, tolerance = tolerance, ref.interval = ref.interval, facCg = facCg, facCgk = facCgk, n = n, col = &quot;lightblue&quot;, xlim = xlim, ylim = ylim, main = paste(&quot;Histogram of&quot;, deparse(substitute(x)), &quot;- target&quot;), conf.level = conf.level, cgOut = FALSE) 6.2.1.3 cgToleranceView Resultados Antes: qualityTools::cgToleranceView(x = x, target = target, tolerance = tolerance, ref.interval = ref.interval, facCg = facCg, facCgk = facCgk, n = n, type = type, col = col, pch = pch, xlim = xlim, ylim = ylim, main = &quot;Tolerance View&quot;, conf.level = conf.level, cgOut = TRUE) Resultados Ahora: cg_ToleranceChart(x = x, target = target, tolerance = tolerance, ref.interval = ref.interval, facCg = facCg, facCgk = facCgk, n = n, type = type, col = col, pch = pch, xlim = xlim, ylim = ylim, main = &quot;Tolerance View&quot;, conf.level = conf.level, cgOut = TRUE) 6.2.1.4 Funcion cg Ahora la función cg se modificará de la siguiente forma: Resultados Antes: x &lt;- c ( 9.991, 10.013, 10.001, 10.007, 10.010, 10.013, 10.008, 10.017, 10.005, 10.005, 10.002, 10.017, 10.005, 10.002, 9.996, 10.011, 10.009 , 10.006, 10.008, 10.003, 10.002, 10.006, 10.010, 9.992, 10.013) qualityTools::cg(x, target = 10.003, tolerance = c(9.903, 10.103)) Resultados Ahora: cg_(x, target = 10.003, tolerance = c(9.903, 10.103)) 6.2.2 Repetibilidad y reproducibilidad del calibre - MSA Tipo II Dado que en la industriia se realiza un análisis Gage R&amp;R para evaluar la repetibilidad y reproducibilidad de un sistema de medición, fue necesario en esta sección la creación de la clase gageRR, con una amplia gama de métodos entre ellos plot, además de la creación de dos funciones gageRRDesign y gageRR_, los resultados se muestran a continuación con la aplicación de un pequeño ejemplo: Crear un objeto de la clase ‘gageRR’ mi_gageRR &lt;- gageRR$new( X = data.frame( Operator = factor(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;)), Part = factor(c(&quot;P1&quot;, &quot;P1&quot;, &quot;P2&quot;, &quot;P2&quot;, &quot;P3&quot;)), Measurement = c(10, 12, 11, 13, 9) ), ANOVA = NULL, # Esto puede ser NULL inicialmente y luego calcularlo RedANOVA = NULL, # Igual que ANOVA, puede ser NULL inicialmente method = &quot;crossed&quot;, Estimates = list(), Varcomp = list(), Sigma = 0.5, GageName = &quot;Gage1&quot;, GageTolerance = 0.1, DateOfStudy = &quot;2024-05-15&quot;, PersonResponsible = &quot;John Doe&quot;, Comments = &quot;Sample gage R&amp;R study&quot;, b = factor(c(&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;B&quot;, &quot;C&quot;)), a = factor(c(&quot;P1&quot;, &quot;P1&quot;, &quot;P2&quot;, &quot;P2&quot;, &quot;P3&quot;)), y = c(10, 12, 11, 13, 9), facNames = c(&quot;Measurement&quot;, &quot;Operator&quot;, &quot;Part&quot;), numO = 3, numP = 3, numM = 2 ) Crear el objeto gageRRObj design_example &lt;- gageRRDesign( Operators = 3, Parts = 10, Measurements = 3, method = &quot;crossed&quot;, sigma = 6, randomize = TRUE ) Crear un diseño para el estudio Gage design &lt;- gageRRDesign(Operators = 3, Parts = 10, Measurements = 3, method = &quot;crossed&quot;, sigma = 6, randomize = TRUE) design$X$Measurement &lt;- rnorm(nrow(design$X), mean = 10, sd = 2) Ejecutar la función gageRR_ result &lt;- gageRR_( gdo = design, method = &quot;crossed&quot;, # método &quot;crossed&quot; sigma = 6, # sigma alpha = 0.25, # Nivel de significancia tolerance = NULL, # Tolerancia dig = 3 # Número de dígitos a mostrar en los resultados ) ## ## AnOVa Table - crossed Design ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Operator 2 17.90 8.952 2.540 0.0873 . ## Part 9 33.93 3.770 1.070 0.3980 ## Operator:Part 18 93.00 5.167 1.466 0.1356 ## Residuals 60 211.47 3.525 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ---------- ## ## Gage R&amp;R ## VarComp VarCompContrib Stdev StudyVar StudyVarContrib ## totalRR 4.198 1.0000 2.049 12.29 1.000 ## repeatability 3.525 0.8395 1.877 11.26 0.916 ## reproducibility 0.674 0.1605 0.821 4.92 0.401 ## Operator 0.126 0.0301 0.355 2.13 0.173 ## Operator:Part 0.547 0.1304 0.740 4.44 0.361 ## Part to Part 0.000 0.0000 0.000 0.00 0.000 ## totalVar 4.198 1.0000 2.049 12.29 1.000 ## ## --- ## * Contrib equals Contribution in % ## **Number of Distinct Categories (truncated signal-to-noise-ratio) = 1 Plot del Objeto gageRR # verificar que objeto es class(result) ## [1] &quot;gageRR&quot; &quot;R6&quot; # Plot result$plot() ## Warning: `aes_string()` was deprecated in ggplot2 3.0.0. ## ℹ Please use tidy evaluation idioms with `aes()`. ## ℹ See also `vignette(&quot;ggplot2-in-packages&quot;)` for more information. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. 6.3 Fase 3: Analizar 6.3.0.1 Capacidad del proceso: Distribución Normal set.seed(1234) datos &lt;- rnorm(20, mean = 20) pcr_(datos, &quot;normal&quot;, lsl = 17, usl = 23) ## ## Anderson Darling Test for normal distribution ## ## data: datos ## A = 0.5722, mean = 19.749, sd = 1.014, p-value = 0.1191 ## alternative hypothesis: true distribution is not equal to normal ## Warning: Removed 1 rows containing missing values (`geom_text()`). Además, las gráficas QQ-plot pueden obtenerse a partir de la siguiente función: qqPlot(datos,&quot;normal&quot;) Así también, los gráficos de probabilidad se pueden calcular con la función ppPlot: # bounds.lty = 3 -&gt; linea entrecortada # bounds.col -&gt; color de las bandas ppPlot(datos, &quot;normal&quot;, bounds.lty = 3, bounds.col = &quot;blue&quot;) Distribución Weibull # set.seed(1234) # weib &lt;- rweibull(20, shape = 2, scale = 8) # pcr_(weib, &quot;weibull&quot;, usl = 20) "]]
